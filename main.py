# main.py with modularization and fixes
import requests
import json
import datetime
from prepods import *
import logging

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ò–º–ø–æ—Ä—Ç –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ config.py
try:
    from config import SCHEDULE_BUDNI, SCHEDULE_SUBBOTA 
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∏, –µ—Å–ª–∏ config.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    logging.warning("–í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª config.py. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.")
    SCHEDULE_BUDNI = {}
    SCHEDULE_SUBBOTA = {}

def Group_ID(group_name):
    #–í—ã–¥–∞—ë—Ç id –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –≤—ã–¥–∞–≤–∞—Ç—å –∏–∑ API
    try:
        Group_list = requests.get("https://urtk-journal.ru/api/groups/urtk", timeout=10)
        Group_list.raise_for_status()
        Group_data = Group_list.json()
        for i in range(0, len(Group_data)):
            for n in range(0, len(Group_data[i]["groups"])):
                if group_name == Group_data[i]["groups"][n]["name"]:
                    return Group_data[i]["groups"][n]["id"]
    except requests.exceptions.RequestException as e:
        logging.error(f"Error fetching group ID for {group_name}: {e}")
    return None
            
def groups_for_keyboard(course):
    list_of_groups = []
    try:
        Group_list = requests.get("https://urtk-journal.ru/api/groups/urtk", timeout=10)
        Group_list.raise_for_status()
        Group_data = Group_list.json()
        for i in range(len(Group_data[course]["groups"])):
            list_of_groups.append(Group_data[course]["groups"][i]["name"])
    except requests.exceptions.RequestException as e:
        logging.error(f"Error fetching groups for keyboard: {e}")
    return list_of_groups

# ----------------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤ -----------------

def get_zvon_schedule(day_type="–ë—É–¥–Ω–∏"):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –ë—É–¥–Ω–µ–π –∏–ª–∏ –°—É–±–±–æ—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    schedule = SCHEDULE_BUDNI if day_type == "–ë—É–¥–Ω–∏" else SCHEDULE_SUBBOTA
    
    output = []
    output.append(f"üîî **–†–ê–°–ü–ò–°–ê–ù–ò–ï –ó–í–û–ù–ö–û–í ({day_type})** üîî\n")
    
    for i, (key, times) in enumerate(schedule.items(), 1):
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä—ã
        number_emoji = {1: '1Ô∏è‚É£', 2: '2Ô∏è‚É£', 3: '3Ô∏è‚É£', 4: '4Ô∏è‚É£', 5: '5Ô∏è‚É£', 6: '6Ô∏è‚É£', 7: '7Ô∏è‚É£'}.get(i, f'*{i}*')
        
        start_time = times[0]
        # –ö–æ–Ω–µ—Ü –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã –ø–∞—Ä—ã (–∏–ª–∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–≤–æ–π, –µ—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –Ω–µ—Ç)
        end_time = times[3] if len(times) > 3 and times[3] else times[1] 
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞—Ä—ã: –û–±—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏
        output.append(f"{number_emoji} **–ü–∞—Ä–∞: {start_time} ‚Äì {end_time}**")

        # 1-–π —É—Ä–æ–∫
        output.append(f"   ‚Ä¢ 1-–π —É—Ä–æ–∫: {times[0]} ‚Äì {times[1]}")
        
        # 2-–π —É—Ä–æ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if len(times) > 3 and times[2]:
            output.append(f"   ‚Ä¢ 2-–π —É—Ä–æ–∫: {times[2]} ‚Äì {times[3]}")
        
        # –ü–µ—Ä–µ—Ä—ã–≤
        break_time = times[-1]
        if break_time and break_time != '‚Äî':
            output.append(f"   ‚Ä¢ –ü–µ—Ä–µ—Ä—ã–≤: *{break_time}*\n")
        else:
            output.append("\n") # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

    return "\n".join(output).strip()

def get_zvon_time_range(lesson_number: int, day_of_week: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –¥–æ –∫–æ–Ω—Ü–∞ –≤—Ç–æ—Ä–æ–≥–æ
    –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏.
    """
    is_subbota = "—Å—É–±–±–æ—Ç–∞" in day_of_week.lower()
    schedule = SCHEDULE_SUBBOTA if is_subbota else SCHEDULE_BUDNI
    
    lesson_key = f"{lesson_number} –ø–∞—Ä–∞"
    
    if lesson_key in schedule:
        times = schedule[lesson_key]
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è (times[0]) –¥–æ –∫–æ–Ω—Ü–∞ –≤—Ç–æ—Ä–æ–≥–æ (times[3])
        return f"{times[0]} - {times[3]}" if len(times) > 3 and times[3] else f"{times[0]} - {times[1]}"
    
    return ""

def get_user_zvon_setting(user_id: str) -> bool:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É show_zvon –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        with open("Data/DBS.json", "r", encoding="utf-8") as read_file:
            data = json.load(read_file)
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é False, –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            return data.get(user_id, {}).get("show_zvon", False) 
    except Exception as e:
        logging.error(f"Error getting user zvon setting: {e}")
        return False

def set_user_zvon_setting(user_id: str, value: bool):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É show_zvon –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        with open("Data/DBS.json", "r", encoding="utf-8") as read_file:
            data = json.load(read_file)
    except Exception:
        data = {} 
        
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    current_data = data.get(user_id, {})
    current_data["show_zvon"] = value
    data[user_id] = current_data
        
    with open('Data/DBS.json', "w", encoding='utf-8') as write_file:
        json.dump(data, write_file, ensure_ascii=False, indent=4)
                
# ----------------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è -----------------

def Is_t_group(group_id: str, day_text: str, user_id: str, day_obj: dict | None = None):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ API –≤ —Å—Ç—Ä–æ–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    day_obj ‚Äì —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–Ω—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–º –≤—ã–∑–æ–≤–µ ¬´–í—Å—è –Ω–µ–¥–µ–ª—è¬ª).
    """
    show_zvon = get_user_zvon_setting(user_id)

    # ------------------------------------------------- –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ -------------------------------------------------
    try:
        client = requests.get(f"https://urtk-journal.ru/api/schedule/group/{group_id}", timeout=10)
        client.raise_for_status()
        data = client.json()
    except requests.exceptions.RequestException as e:
        logging.error(f"Error fetching group schedule: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    schedule_data = data.get("schedule", [])
    group_name = data.get("name", "–ì—Ä—É–ø–ø–∞")

    # ------------------------------------------------- –í–°–Ø –ù–ï–î–ï–õ–Ø -------------------------------------------------
    if day_text == "–í—Å—è –Ω–µ–¥–µ–ª—è":
        # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é —É—á–µ–±–Ω—É—é –Ω–µ–¥–µ–ª—é (–ü–Ω ‚Üí –°–±)
        today = datetime.datetime.today()
        monday = today - datetime.timedelta(days=today.weekday())          # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        week_start = monday
        week_end   = monday + datetime.timedelta(days=10) 
        print(week_end)
        # –°—É–±–±–æ—Ç–∞ –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ

        # –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –Ω—É–∂–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏ –Ω–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        week_days = [
            d for d in schedule_data
            if d.get("day") != "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
            and (dt := d.get("date")) and (dt := datetime.datetime.strptime(dt, "%d.%m.%Y"))
            and week_start <= dt <= week_end
        ]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–µ—Ä–µ–¥–∞–≤–∞—è –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –¥–Ω—è –≤ —Ä–µ–∫—É—Ä—Å–∏—é
        parts = [
            Is_t_group(group_id, d["day"], user_id, day_obj=d)
            for d in week_days
        ]
        return "\n\n".join(filter(None, parts)) or "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

    # ------------------------------------------------- –û–î–ò–ù –î–ï–ù–¨ -------------------------------------------------
    # –ï—Å–ª–∏ day_obj –ø–µ—Ä–µ–¥–∞–Ω ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—â–µ–º –≤ schedule_data
    target = day_obj or next(
        (d for d in schedule_data if d.get("day") == day_text), None
    )

    if not target:
        return f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ *{day_text}* –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

    lessons = target.get("lessons", [])
    lines = []
    
    date_str = target.get("date", "")[:5]
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
          
    lines.append(f"*{date_str} - {target['day']} ({group_name})*")

    # –ü–∞—Ä—ã
    for lesson in lessons:
        num = lesson.get("number")
        if num is None:
            continue

        zvon = get_zvon_time_range(num, target["day"]) if show_zvon else ""
        zvon_sep = f" | {zvon}" if zvon else ""

        name_raw  = lesson.get("name", "") or ""
        office_raw = lesson.get("office", "") or ""

        try:
            # ---------- –ø–æ–¥–≥—Ä—É–ø–ø—ã ----------
            if "/" in name_raw and "/" in office_raw:
                name_parts   = [p.strip() for p in name_raw.split("/")]
                office_parts = [o.strip() for o in office_raw.split("/")]

                def clean(n):
                    n = n.split(" | ")[0]
                    p = n.split()
                    if len(p) >= 2 and p[-1].isupper() and p[-2].isupper():
                        return " ".join(p[:-2])
                    if len(p) >= 2 and len(p[-2]) == 2 and p[-2].endswith('.') \
                       and len(p[-1]) == 2 and p[-1].endswith('.'):
                        return " ".join(p[:-2])
                    return n

                n1 = clean(name_parts[0])
                n2 = clean(name_parts[1]) if len(name_parts) > 1 else ""

                lines.append(
                    f"*{num}*)\n"
                    f"  {n1} - {office_parts[0]}{zvon_sep}\n"
                    f"  {n2} - {office_parts[1]}{zvon_sep}"
                )
                continue

            # ---------- –æ–±—ã—á–Ω–∞—è –ø–∞—Ä–∞ ----------
            name_disp = name_raw.split(" | ")[0].split(" / ")[0].strip()
            if "–ö–ª. —á–∞—Å" in name_disp:
                lines.append(f"*{num}*) {name_disp} - {office_raw}{zvon_sep}")
            else:
                p = name_disp.split()
                if len(p) > 3:
                    name_disp = " ".join(p[:-3])
                elif len(p) > 2:
                    name_disp = " ".join(p[:-2])
                lines.append(f"*{num}*) {name_disp} - {office_raw}{zvon_sep}")

        except Exception as e:
            logging.error(f"Error processing lesson {target.get('date')} #{num}: {e}")
            lines.append(f"*{num}*){zvon_sep}")

    return "\n".join(lines)

# ----------------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î -----------------

def get_user_setting_string(user_id: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É, –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∏–ª–∏ 'None'."""
    try:
        with open("Data/DBS.json", "r", encoding="utf-8") as read_file:
            data = json.load(read_file)
            user_data = data.get(user_id, {})
            
            group = user_data.get("groupName")
            prepod = user_data.get("prepod")
            
            if group:
                return group
            elif prepod:
                return prepod
            else:
                return "None"
    except Exception as e:
        logging.error(f"Error getting user setting: {e}")
        return "None"


def all_users_cout():
    #–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥–æ—É–ø–ø–æ–π (–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å)
    cout = ["–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"]
    with open("Data/DBS.json", "r") as read_file:
        data = dict(json.load(read_file))
        IDs = list(data.keys())
        x = 0
        i = 0
        return_list = []
        for i in IDs:
            x += 1
            cout.append(f"{x}. @{data[i]["username"]} - {data[i]["groupName"]}\n")
        return_list.append(cout)
    return return_list


def groupChoise(G_name: str, ID: str, username:str, time):
    #–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        with open("Data/DBS.json", "r", encoding="utf-8") as read_file:
            data = json.load(read_file)
    except Exception:
        data = {}

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å
    current_data = data.get(ID, {})
    current_show_zvon = current_data.get("show_zvon", False)
    current_prepod = current_data.get("prepod", None)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    studentGroupChoise = {
        "groupName": G_name, 
        "username": username if username else f"id_{ID}", 
        "time": time, 
        "prepod": current_prepod, 
        "show_zvon": current_show_zvon 
    }
    
    data[ID] = studentGroupChoise
    
    with open('Data/DBS.json', "w", encoding='utf-8') as write_file:
        json.dump(data, write_file, ensure_ascii=False, indent=4)

def base_group_name(id):
    #–ù–∞—Ö–æ–¥–∏—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–º –≥—Ä—É–ø–ø—ã
    try:
        with open("Data/DBS.json", "r", encoding="utf-8") as read_file:
            data = dict(json.load(read_file))
            group_name = data.get(id, {}).get("groupName")
            return Group_ID(group_name) if group_name else None
    except Exception as e:
        logging.error(f"Error in base_group_name: {e}")
        return None
    
def base_group_name_string(id):
    #–ù–∞—Ö–æ–¥–∏—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    try:
        with open("Data/DBS.json", "r", encoding="utf-8") as read_file:
            data = dict(json.load(read_file))
            return data.get(id, {}).get("groupName")
    except Exception as e:
        logging.error(f"Error in base_group_name_string: {e}")
        return None

def base_group_name_or_none(user_id):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ None (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ TeleMain.py)."""
    try:
        with open("Data/DBS.json", "r") as read_file:
            data = dict(json.load(read_file))
            return data.get(user_id, {}).get("groupName")
    except Exception as e:
        logging.error(f"Error in base_group_name_or_none: {e}")
        return None

def all_id():
    #–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å)
    list_of_ID = []
    try:
        with open("Data/DBS.json", "r") as read_file:
            data = dict(json.load(read_file))
            for key in data.keys():
                list_of_ID.append(key)
    except Exception as e:
        logging.error(f"Error in all_id: {e}")
    return list_of_ID

def base_open_admin():
    #–í—ã–≤–æ–¥–∏—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å)
    try:
        with open("Data/DBS.json", "r") as read_file:
            data = json.dumps(dict(json.load(read_file)))
        with open("Data/DB_save.txt", "w") as write_file:
            write_file.write(str(data))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ë–î: {e}")