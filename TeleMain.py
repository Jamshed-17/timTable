import telebot
import time
from telebot import types
import datetime
from returned import multi_update
from main import *
from prepods import *
from threading import Thread
from config import work_TOKEN, test_TOKEN

bot = telebot.TeleBot(test_TOKEN)
t = Thread(target=multi_update)
t.start()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
USER_STATES = {}

def set_user_state(chat_id, state):
    USER_STATES[chat_id] = state

def get_user_state(chat_id):
    return USER_STATES.get(chat_id, "main")

def clear_user_state(chat_id):
    if chat_id in USER_STATES:
        del USER_STATES[chat_id]

@bot.message_handler(commands=['start'])
def start(message):
    clear_user_state(message.chat.id)
    groupChoise(None, str(message.chat.id), str(message.chat.username), None)
    show_main_menu(message)

def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    butn1 = types.KeyboardButton("1 –∫—É—Ä—Å")
    butn2 = types.KeyboardButton("2 –∫—É—Ä—Å")
    butn3 = types.KeyboardButton("3 –∫—É—Ä—Å")
    butn4 = types.KeyboardButton("4 –∫—É—Ä—Å")
    butn5 = types.KeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")
    markup.add(butn1, butn2, butn3, butn4, butn5)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å", reply_markup=markup)

@bot.message_handler(commands=['prepod'])
def prepod_command(message):
    prepod_tim_table(message)

@bot.message_handler(commands=['admin'])
def admin_command(message):
    admin_menu_inter(message)

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")
def handle_prepods_button(message):
    prepod_tim_table(message)

@bot.message_handler(func=lambda message: message.text in ["1 –∫—É—Ä—Å", "2 –∫—É—Ä—Å", "3 –∫—É—Ä—Å", "4 –∫—É—Ä—Å"])
def handle_course_selection(message):
    show_groups_menu(message)

def show_groups_menu(message):
    course_map = {
        "1 –∫—É—Ä—Å": 0,
        "2 –∫—É—Ä—Å": 1, 
        "3 –∫—É—Ä—Å": 2,
        "4 –∫—É—Ä—Å": 3
    }
    
    course_index = course_map[message.text]
    groups_list = groups_for_keyboard(course_index)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(groups_list), 3):
        row = groups_list[i:i+3]
        markup.add(*row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    back_btn = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(back_btn)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É", reply_markup=markup)
    set_user_state(message.chat.id, "group_selection")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "group_selection")
def handle_group_selection(message):
    if message.text == "–ù–∞–∑–∞–¥":
        clear_user_state(message.chat.id)
        show_main_menu(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞
    try:
        group_id = Group_ID(message.text)
        if group_id:
            GroupId = group_id
            groupChoise(message.text, str(message.chat.id), str(message.chat.username),
                       datetime.datetime.now().strftime('(%Y-%m-%d)%H:%M:%S'))
            show_days_menu(message)
        else:
            bot.send_message(message.chat.id, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def show_days_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í—Å—è –Ω–µ–¥–µ–ª—è", "–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(days), 3):
        row = days[i:i+3]
        markup.add(*row)
    
    bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Ç–µ–±–µ –≤—ã–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=markup)
    set_user_state(message.chat.id, "day_selection")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "day_selection")
def handle_day_selection(message):
    week_days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í—Å—è –Ω–µ–¥–µ–ª—è"]
    
    if message.text == "–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É":
        clear_user_state(message.chat.id)
        show_main_menu(message)
        return
    
    if message.text in week_days:
        now = datetime.datetime.now().strftime('(%Y-%m-%d)%H:%M:%S')
        if time_check(now, str(message.chat.id)):
            try:
                schedule = Is_t_group(base_group_name(str(message.chat.id)), message.text)
                bot.send_message(message.chat.id, schedule, parse_mode="Markdown")
            except Exception as e:
                bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        else:
            bot.send_message(message.chat.id, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

# ---------------------------------admin-------------------------------------------
def admin_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    gr1 = types.KeyboardButton("üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    gr2 = types.KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    gr3 = types.KeyboardButton("üóûÔ∏è –ù–æ–≤–æ—Å—Ç–∏")
    back_btn = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(gr1, gr2, gr3, back_btn)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)
    set_user_state(message.chat.id, "admin_menu")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "admin_menu")
def handle_admin_menu(message):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        clear_user_state(message.chat.id)
        start(message)
    elif message.text == "üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        show_main_menu(message)
    elif message.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        show_users_info(message)
    elif message.text == "üóûÔ∏è –ù–æ–≤–æ—Å—Ç–∏":
        ask_for_news(message)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é")

def show_users_info(message):
    try:
        markup = telebot.types.InlineKeyboardMarkup(row_width=1)
        but1 = telebot.types.InlineKeyboardButton("Give BD", callback_data="BD_cout")
        markup.add(but1)
        for i in range(len(all_users_cout())):
          cout = ""
          for j in range(len(all_users_cout()[i])):
            cout += all_users_cout()[i][j]
            if j % 100 == 0:
              bot.send_message(message.chat.id, text=f"{cout}".format(message.from_user))
              cout = ""
              cout += all_users_cout()[i][j]
          bot.send_message(message.chat.id, text=f"{cout}".format(message.from_user))
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö: {e}")
    
    markup = types.InlineKeyboardMarkup()
    bd_btn = types.InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", callback_data="BD_cout")
    markup.add(bd_btn)
    bot.send_message(message.chat.id, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=markup)

def ask_for_news(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cancel_btn = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
    markup.add(cancel_btn)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=markup)
    set_user_state(message.chat.id, "news_input")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "news_input")
def handle_news_input(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        admin_menu(message)
    else:
        try:
            user_ids = all_id()
            success_count = 0
            for user_id in user_ids:
                try:
                    bot.send_message(user_id, f"üì¢ –ù–æ–≤–æ—Å—Ç—å:\n\n{message.text}")
                    success_count += 1
                except Exception as e:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            
            bot.send_message(message.chat.id, f"–ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        
        admin_menu(message)

@bot.callback_query_handler(func=lambda call: call.data == "BD_cout")
def handle_bd_download(call):
    try:
        file_path = base_open_admin()
        with open(file_path, 'rb') as file:
            bot.send_document(call.message.chat.id, file)
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")

@bot.message_handler(commands=["admin"])
def admin_menu_inter(message):
    if message.chat.username == "Jamshed17":
        admin_menu(message)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        start(message)

# ---------------------------------prepods-----------------------------------------
def prepod_tim_table(message):
    try:
        last_prepod = base_prepod_name(str(message.chat.id)).split(" ")[0]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(last_prepod)
    except:
        markup = types.ReplyKeyboardRemove()
    
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–≤—ã–µ 3 –±—É–∫–≤—ã):", reply_markup=markup)
    set_user_state(message.chat.id, "prepod_input")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "prepod_input")
def handle_prepod_input(message):
    prepod_list = prepod_ch(message.text)
    
    if not prepod_list:
        bot.send_message(message.chat.id, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for prepod in prepod_list:
        markup.add(prepod)
    
    back_btn = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(back_btn)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
    set_user_state(message.chat.id, "prepod_selection")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "prepod_selection")
def handle_prepod_selection(message):
    if message.text == "–ù–∞–∑–∞–¥":
        clear_user_state(message.chat.id)
        show_main_menu(message)
        return
    
    try:
        prepod_to_bd(message.text, str(message.chat.id))
        show_prepod_menu(message)
    except Exception as e:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        prepod_tim_table(message)

def show_prepod_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    schedule_btn = types.KeyboardButton("–í—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    main_menu_btn = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(schedule_btn, main_menu_btn)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    set_user_state(message.chat.id, "prepod_menu")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "prepod_menu")
def handle_prepod_menu(message):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        clear_user_state(message.chat.id)
        start(message)
    elif message.text == "–í—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        try:
            prepod_name = base_prepod_name(str(message.chat.id))
            schedule = format_teacher_schedule(prepod_name)
            bot.send_message(message.chat.id, schedule, parse_mode="Markdown")
        except Exception as e:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    current_state = get_user_state(message.chat.id)
    
    if current_state == "main":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        show_main_menu(message)
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã")

if __name__ == "__main__":
    bot.infinity_polling()