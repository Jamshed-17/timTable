import telebot
import time
import datetime
from telebot import types
from threading import Thread
from functools import wraps
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --------------------------------- –ò–º–ø–æ—Ä—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---------------------------------

try:
    from config import work_TOKEN, test_TOKEN, SCHEDULE_BUDNI, SCHEDULE_SUBBOTA, ADMIN_USERNAME
except ImportError:
    logging.warning("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω config.py. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∏.")
    work_TOKEN = "TEST_TOKEN"
    test_TOKEN = "TEST_TOKEN"
    ADMIN_USERNAME = "admin"
    SCHEDULE_BUDNI, SCHEDULE_SUBBOTA = {}, {}

from main import *
from prepods import *
from returned import multi_update

# --------------------------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---------------------------------

bot = telebot.TeleBot(test_TOKEN, exception_handler=telebot.ExceptionHandler())
t = Thread(target=multi_update)
t.daemon = True
t.start()

# --------------------------------- –ê–Ω—Ç–∏—Å–ø–∞–º ---------------------------------

THROTTLE_TIME = 0.3  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
THROTTLE_DICT = {}

def rate_limit(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        uid = message.chat.id
        now = time.time()
        if now - THROTTLE_DICT.get(uid, 0) < THROTTLE_TIME:
            return
        THROTTLE_DICT[uid] = now
        return func(message, *args, **kwargs)
    return wrapper

# --------------------------------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ ---------------------------------

USER_STATES = {}

def set_user_state(chat_id, state):
    USER_STATES[chat_id] = state

def get_user_state(chat_id):
    return USER_STATES.get(chat_id, "main")

def clear_user_state(chat_id):
    USER_STATES.pop(chat_id, None)

# --------------------------------- –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ ---------------------------------

def show_users_info(message):
        markup = telebot.types.InlineKeyboardMarkup(row_width=1)
        but1 = telebot.types.InlineKeyboardButton("Give BD", callback_data="BD_cout")
        markup.add(but1)
        for i in range(len(all_users_cout())):
          cout = ""
          for j in range(len(all_users_cout()[i])):
            cout += all_users_cout()[i][j]
            if j % 100 == 0 and j != 0:
              bot.send_message(message.chat.id, text=f"{cout}".format(message.from_user))
              cout = ""
          if cout:
              bot.send_message(message.chat.id, text=f"{cout}".format(message.from_user))
        bot.send_message(message.chat.id, " ", reply_markup=markup)
    
    

def handle_bd_download(message):
    base_open_admin()
    try:
        with open("Data/DB_save.txt", "rb") as file:
            bot.send_document(message.chat.id, file)
    except FileNotFoundError:
        bot.send_message(message.chat.id, "–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.error(f"Error downloading BD: {e}")
    admin_menu(message)

def ask_for_news(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cancel_btn = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
    markup.add(cancel_btn)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ *–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) —Å –ø–æ–¥–ø–∏—Å—å—é*:", reply_markup=markup, parse_mode="Markdown")
    set_user_state(message.chat.id, "admin_news")

@bot.message_handler(commands=['admin'])
@rate_limit
def admin_menu(message):
    if message.chat.username and message.chat.username.lower() == ADMIN_USERNAME.lower():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn_users = types.KeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        btn_bd = types.KeyboardButton("–°–∫–∞—á–∞—Ç—å –ë–î")
        btn_news = types.KeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞")
        btn_update = types.KeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–æ–≤")
        btn_main = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn_users, btn_bd)
        markup.add(btn_news, btn_update)
        markup.add(btn_main)
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=markup)
        set_user_state(message.chat.id, "admin_menu")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "admin_menu")
@rate_limit
def handle_admin_menu(message):
    if not (message.chat.username and message.chat.username.lower() == ADMIN_USERNAME.lower()):
        clear_user_state(message.chat.id)
        return

    if message.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        show_users_info(message)
    elif message.text == "–°–∫–∞—á–∞—Ç—å –ë–î":
        handle_bd_download(message)
    elif message.text == "–†–∞—Å—Å—ã–ª–∫–∞":
        ask_for_news(message)
    elif message.text == "–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–æ–≤":
        bot.send_message(message.chat.id, "–ù–∞—á–∞—Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π...")
        try:
            update_teacher_sh()  # Call single update instead of multi
            bot.send_message(message.chat.id, "‚úî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"Error updating teachers schedule: {e}")
        admin_menu(message)
    elif message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        clear_user_state(message.chat.id)
        show_main_menu(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

@bot.message_handler(content_types=['text', 'photo', 'video'], func=lambda message: get_user_state(message.chat.id) == "admin_news")
@rate_limit
def handle_news_input(message):
    if not (message.chat.username and message.chat.username.lower() == ADMIN_USERNAME.lower()):
        clear_user_state(message.chat.id)
        return

    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        admin_menu(message)
        return
    
    content_type = 'text'
    file_id = None
    text_content = ""
    caption = ""
    
    if message.photo:
        content_type = 'photo'
        file_id = message.photo[-1].file_id 
        caption = message.caption if message.caption else ""
    elif message.video:
        content_type = 'video'
        file_id = message.video.file_id
        caption = message.caption if message.caption else ""
    elif message.text:
        content_type = 'text'
        text_content = message.text
    else:
        bot.send_message(message.chat.id, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        return
        
    try:
        user_ids = all_id()
        success_count = 0
        
        bot.send_message(message.chat.id, f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É *{content_type}* –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...", parse_mode="Markdown")
        
        for user_id in user_ids:
            if str(user_id) == str(message.chat.id):
                continue
                
            try:
                prefix = "üì¢ –ù–æ–≤–æ—Å—Ç—å:\n\n"
                
                if content_type == 'text':
                    message_text = f"{prefix}{text_content}"
                    bot.send_message(user_id, message_text)
                else:
                    message_caption = f"{prefix}{caption}"
                    if content_type == 'photo':
                        bot.send_photo(user_id, file_id, caption=message_caption)
                    elif content_type == 'video':
                        bot.send_video(user_id, file_id, caption=message_caption, supports_streaming=True)
                
                success_count += 1
            except telebot.apihelper.ApiTelegramException as e:
                if e.error_code == 403:
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                else:
                    logging.error(f"Error sending news to {user_id}: {e}")
                continue  
            
            time.sleep(0.05)  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏, –Ω–æ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å —Ñ–ª—É–¥–æ–º
        
        bot.send_message(message.chat.id, f"–ù–æ–≤–æ—Å—Ç—å ({content_type}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ *{success_count}* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", parse_mode="Markdown")
    except Exception as e:
        logging.error(f"Critical error in news broadcast: {e}")
    
    admin_menu(message)

# --------------------------------- –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ---------------------------------

@bot.message_handler(commands=["start"])
@rate_limit
def start(message):
    clear_user_state(message.chat.id)
    group = base_group_name_string(str(message.chat.id))
    groupChoise(group, str(message.chat.id),
                message.chat.username or None,
                datetime.datetime.now().strftime("(%Y-%m-%d)%H:%M:%S"))
    show_main_menu(message)

def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("1 –∫—É—Ä—Å", "2 –∫—É—Ä—Å", "3 –∫—É—Ä—Å")
    markup.add("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", "–ó–≤–æ–Ω–∫–∏", "4 –∫—É—Ä—Å")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    set_user_state(message.chat.id, "main")

# --------------------------------- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ ---------------------------------

@bot.message_handler(commands=['zvon'], func=lambda message: get_user_state(message.chat.id) != "admin_news")
@bot.message_handler(func=lambda message: message.text == "–ó–≤–æ–Ω–∫–∏" and get_user_state(message.chat.id) == "main")
@rate_limit
def handle_zvon(message):
    group_name = base_group_name_string(str(message.chat.id))
    groupChoise(group_name, 
                str(message.chat.id), 
                message.chat.username if message.chat.username else None, 
                datetime.datetime.now().strftime('(%Y-%m-%d)%H:%M:%S'))
    show_zvon_schedule(message.chat.id, "–ë—É–¥–Ω–∏")

def show_zvon_schedule(chat_id, day_type):
    schedule = get_zvon_schedule(day_type)
    markup = types.InlineKeyboardMarkup()
    btn_text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –°—É–±–±–æ—Ç—É" if day_type == "–ë—É–¥–Ω–∏" else "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ë—É–¥–Ω–∏"
    btn_callback = "zvon_subbota" if day_type == "–ë—É–¥–Ω–∏" else "zvon_budni"
    markup.add(types.InlineKeyboardButton(btn_text, callback_data=btn_callback))
    bot.send_message(chat_id, schedule + "\n\n–ó–≤–æ–Ω–∫–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:\n –í–∫–ª üëâ /zvonON\n –í—ã–∫–ª üëâ /zvonOFF", parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("zvon_"))
def change_zvon(call):
    chat_id = call.message.chat.id
    if call.data in ["zvon_subbota", "zvon_budni"]:
        new_day = "–°—É–±–±–æ—Ç–∞" if call.data == "zvon_subbota" else "–ë—É–¥–Ω–∏"
        try:
            bot.delete_message(chat_id, call.message.message_id)
        except Exception as e:
            logging.error(f"Error deleting message: {e}")
        show_zvon_schedule(chat_id, new_day)
    bot.answer_callback_query(call.id)

@bot.message_handler(commands=["zvonON"], func=lambda message: get_user_state(message.chat.id) != "admin_news")
@rate_limit
def zvon_on(message):
    set_user_zvon_setting(str(message.chat.id), True)
    bot.send_message(message.chat.id, "‚úî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ *–≤–∫–ª—é—á–µ–Ω–æ* –∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä—è–¥–æ–º —Å –ø–∞—Ä–∞–º–∏.", parse_mode="Markdown")
    if get_user_state(message.chat.id) == "main":
        show_main_menu(message)

@bot.message_handler(commands=["zvonOFF"], func=lambda message: get_user_state(message.chat.id) != "admin_news")
@rate_limit
def zvon_off(message):
    set_user_zvon_setting(str(message.chat.id), False)
    bot.send_message(message.chat.id, "‚úó –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ *–æ—Ç–∫–ª—é—á–µ–Ω–æ*.", parse_mode="Markdown")
    if get_user_state(message.chat.id) == "main":
        show_main_menu(message)

# --------------------------------- –í—ã–±–æ—Ä –∫—É—Ä—Å–∞ –∏ –≥—Ä—É–ø–ø—ã ---------------------------------

@bot.message_handler(func=lambda message: message.text in ["1 –∫—É—Ä—Å", "2 –∫—É—Ä—Å", "3 –∫—É—Ä—Å", "4 –∫—É—Ä—Å"] and get_user_state(message.chat.id) == "main")
@rate_limit
def select_course(message):
    num = int(message.text.split()[0])
    groups = groups_for_keyboard(num - 1)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(0, len(groups), 3):
        markup.row(*groups[i:i+3])
    markup.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è {num} –∫—É—Ä—Å–∞:", reply_markup=markup)
    set_user_state(message.chat.id, "group_select")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "group_select")
@rate_limit
def select_group(message):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        clear_user_state(message.chat.id)
        show_main_menu(message)
        return

    group = message.text
    if not Group_ID(group):
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    groupChoise(group, str(message.chat.id), message.chat.username or None,
                datetime.datetime.now().strftime("(%Y-%m-%d)%H:%M:%S"))
    bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É *{group}*.", parse_mode="Markdown")
    show_days_menu(message)

def show_days_menu(message):
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞",
            "–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–í—Å—è –Ω–µ–¥–µ–ª—è"]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(0, len(days), 3):
        markup.row(*days[i:i+3])
    markup.add("–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=markup)
    set_user_state(message.chat.id, "day_select")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "day_select")
@rate_limit
def handle_day(message):
    txt = message.text
    if txt == "–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É":
        clear_user_state(message.chat.id)
        show_main_menu(message)
        return

    valid = ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í—Å—è –Ω–µ–¥–µ–ª—è"]
    if txt not in valid:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ –º–µ–Ω—é.")
        return

    day = txt
    if txt == "–°–µ–≥–æ–¥–Ω—è":
        day = datetime.datetime.now().strftime("%A")
    elif txt == "–ó–∞–≤—Ç—Ä–∞":
        day = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime("%A")

    day = (day.replace("Monday", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫").replace("Tuesday", "–í—Ç–æ—Ä–Ω–∏–∫")
               .replace("Wednesday", "–°—Ä–µ–¥–∞").replace("Thursday", "–ß–µ—Ç–≤–µ—Ä–≥")
               .replace("Friday", "–ü—è—Ç–Ω–∏—Ü–∞").replace("Saturday", "–°—É–±–±–æ—Ç–∞")
               .replace("Sunday", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"))

    try:
        gid = base_group_name(str(message.chat.id))
        if not gid:
            bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.")
            clear_user_state(message.chat.id)
            show_main_menu(message)
            return

        schedule = Is_t_group(gid, day, str(message.chat.id))
        bot.send_message(message.chat.id, schedule, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"Error handling day: {e}")
        

# --------------------------------- –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ ---------------------------------

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏" and get_user_state(message.chat.id) == "main")
@rate_limit
def handle_prepods(message):
    prepod = base_prepod_name(str(message.chat.id))
    if prepod:
        bot.send_message(message.chat.id, f"–í–∞—à –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: *{prepod}*", parse_mode="Markdown")
        show_prepod_menu(message)
    else:
        ask_for_prepod(message)

def ask_for_prepod(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
    set_user_state(message.chat.id, "prepod_input")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "prepod_input")
@rate_limit
def input_prepod(message):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        clear_user_state(message.chat.id)
        show_main_menu(message)
        return

    lastname = message.text
    matches = prepod_ch(lastname)
    if not matches:
        bot.send_message(message.chat.id, f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å '{lastname}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        ask_for_prepod(message)
        return

    if len(matches) == 1:
        prepod_to_bd(matches[0], str(message.chat.id))
        bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: *{matches[0]}*", parse_mode="Markdown")
        show_prepod_menu(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for m in matches:
            markup.add(m)
        markup.add("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.send_message(message.chat.id, "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ:", reply_markup=markup)
        set_user_state(message.chat.id, "prepod_select")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "prepod_select")
@rate_limit
def select_prepod(message):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        clear_user_state(message.chat.id)
        show_main_menu(message)
        return

    prepod_to_bd(message.text, str(message.chat.id))
    bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: *{message.text}*", parse_mode="Markdown")
    show_prepod_menu(message)

def show_prepod_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–í—Å—è –Ω–µ–¥–µ–ª—è")
    markup.add("–°–º–µ–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    set_user_state(message.chat.id, "prepod_menu")

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "prepod_menu")
@rate_limit
def prepod_menu(message):
    if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        clear_user_state(message.chat.id)
        show_main_menu(message)
        return
    if message.text == "–°–º–µ–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è":
        ask_for_prepod(message)
        return

    if message.text not in ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–í—Å—è –Ω–µ–¥–µ–ª—è"]:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return

    prepod = base_prepod_name(str(message.chat.id))
    user_id = str(message.chat.id)
    day = message.text
    if day == "–°–µ–≥–æ–¥–Ω—è":
        day = datetime.datetime.now().strftime("%A")
    elif day == "–ó–∞–≤—Ç—Ä–∞":
        day = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime("%A")

    day = (day.replace("Monday", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫").replace("Tuesday", "–í—Ç–æ—Ä–Ω–∏–∫")
               .replace("Wednesday", "–°—Ä–µ–¥–∞").replace("Thursday", "–ß–µ—Ç–≤–µ—Ä–≥")
               .replace("Friday", "–ü—è—Ç–Ω–∏—Ü–∞").replace("Saturday", "–°—É–±–±–æ—Ç–∞")
               .replace("Sunday", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"))

    try:
        if message.text == "–í—Å—è –Ω–µ–¥–µ–ª—è":
            schedule = format_teacher_schedule(prepod, user_id)
        else:
            schedule = teach_shredule_cout_day(day, prepod, user_id)
        bot.send_message(message.chat.id, schedule, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"Error in prepod menu: {e}")

# --------------------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–µ–≥–æ ---------------------------------

@bot.message_handler(func=lambda message: get_user_state(message.chat.id) == "main")
@rate_limit
def fallback(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é üôÇ")
    show_main_menu(message)

# --------------------------------- –ó–∞–ø—É—Å–∫ ---------------------------------

if __name__ == "__main__":
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    while True:
        try:
            bot.infinity_polling(skip_pending=True, timeout=30)  # –£–º–µ–Ω—å—à–µ–Ω timeout –¥–ª—è –ª—É—á—à–µ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏
        except Exception as e:
            logging.error(f"Polling error: {e}")
            time.sleep(5)  # –£–º–µ–Ω—å—à–µ–Ω–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è