import telebot
import time
from telebot import types
import datetime
from returned import multi_update
from main import *
from threading import Thread
from config import work_TOKEN, test_TOKEN

bot = telebot.TeleBot(work_TOKEN)
# t=Thread(target=multi_update)
# t.start()

@bot.message_handler(commands=['prepod'])
def prepod_tim_table(message):
  try:
    last_prepod = base_prepod_name(str(message.chat.id)).split(" ")[0]
  except: last_prepod = False
  if last_prepod:
    del_keyboard = types.ReplyKeyboardMarkup(True, True)
    btn1 = last_prepod
    del_keyboard.add(btn1)
  else:
    del_keyboard = types.ReplyKeyboardRemove()
  bot.send_message(message.chat.id, text="–î–∞–≤–∞–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è. –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–∏–ª–∏ —á–∞—Å—Ç—å —Ñ–∞–º–∏–ª–∏–∏)", reply_markup = del_keyboard)
  bot.register_next_step_handler(message, prepod_use)
  
def prepod_use(message):
  name = ''
  bot.send_message(message.chat.id, text=f"–ó–∞–≥—Ä—É–∑–∫–∞. –û–¥–Ω—É —Å–µ–∫—É–Ω–¥—É")
  keyboard = types.ReplyKeyboardMarkup(True, True)
  list = prepod_ch(message.text)
  for i in list:
    keyboard.add(i)
    name += i
  bot.send_message(message.chat.id, 
                   text="""–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—ë –§–ò–û –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞:\n–ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç - —Ñ–∞–º–∏–ª–∏—è –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–∏ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç""", 
                   reply_markup=keyboard, parse_mode="Markdown")
  bot.register_next_step_handler(message, prepod_to_DB)
   
def prepod_to_DB(message):
  prepod_to_bd(str(message.text), str(message.chat.id))
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  btn1 = types.KeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
  btn2 = types.KeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫")
  btn3 = types.KeyboardButton("–°—Ä–µ–¥–∞")
  btn4 = types.KeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥")
  btn5 = types.KeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞")
  btn6 = types.KeyboardButton("–°—É–±–±–æ—Ç–∞")
  btn7 = types.KeyboardButton("–í—Å—è –Ω–µ–¥–µ–ª—è")
  btn8 = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
  markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8)
  bot.send_message(message.chat.id, text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤—ã–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?"
                   .format(message.from_user), reply_markup=markup)
  bot.register_next_step_handler(message, prepod_day)
  
def prepod_day(message):
  if message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
    start(message)
  elif message.text == "–í—Å—è –Ω–µ–¥–µ–ª—è":
    cout_schedule_prepod_week = ""               
    for i in format_teacher_schedule("".join(base_prepod_name(str(message.chat.id)))):
        cout_schedule_prepod_week += f"{i}\n"
    bot.send_message(message.chat.id, 
                     text=cout_schedule_prepod_week, 
                     parse_mode="Markdown")
    bot.register_next_step_handler(message, prepod_day)
  else:
    try:
      bot.send_message(message.chat.id, 
                      text=teach_shredule_cout_day(day=str(message.text), name=base_prepod_name(str(message.chat.id))), 
                      parse_mode="Markdown")
      bot.register_next_step_handler(message, prepod_day)
    except:
      bot.send_message(message.chat.id, 
                     text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –æ—Ç–¥—ã—Ö–∞–µ—Ç, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", 
                     parse_mode="Markdown")
      bot.register_next_step_handler(message, prepod_day)

    

@bot.message_handler(commands=['start'])
def start(message):
  if message.chat.username == "Jamshed17":
    bot.send_message(message.chat.id, text="–ê–¥–º–∏–Ω–∫–∞ –µ—Å—Ç—å".format(message.from_user))
    admin_menu(message)
  else:
    groupChoise(None, str(message.chat.id), str(message.chat.username), None)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    butn1 = types.KeyboardButton("1 –∫—É—Ä—Å")
    butn2 = types.KeyboardButton("2 –∫—É—Ä—Å")
    butn3 = types.KeyboardButton("3 –∫—É—Ä—Å")
    butn4 = types.KeyboardButton("4 –∫—É—Ä—Å")
    markup.add(butn1, butn2, butn3, butn4,)
    bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å".format(message.from_user), reply_markup=markup)
    bot.register_next_step_handler(message, groups)


def admin_menu(message):
  # –ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –ø–æ—Å–æ–º—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  gr1 = types.KeyboardButton("üóìÔ∏è")
  gr2 = types.KeyboardButton("üë•")
  gr3 = types.KeyboardButton("üóûÔ∏è")
  markup.add(gr1, gr2, gr3)
  bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ".format(message.from_user), reply_markup=markup)
  bot.register_next_step_handler(message, admin_urls)
  
def admin_urls(message):
  # –ó–¥–µ—Å—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω –º–µ–Ω—é
  if message.text == "üóìÔ∏è":
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    butn1 = types.KeyboardButton("1 –∫—É—Ä—Å")
    butn2 = types.KeyboardButton("2 –∫—É—Ä—Å")
    butn3 = types.KeyboardButton("3 –∫—É—Ä—Å")
    butn4 = types.KeyboardButton("4 –∫—É—Ä—Å")
    markup.add(butn1, butn2, butn3, butn4,)
    bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫—É—Ä—Å".format(message.from_user), reply_markup=markup)
    bot.register_next_step_handler(message, groups)
  elif message.text == "üë•":
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    but1 = telebot.types.InlineKeyboardButton("Give BD", callback_data="BD_cout")
    markup.add(but1)
    for i in range (len(all_users_cout())):
      cout = ""
      for j in range(len(all_users_cout()[i])):
        cout += all_users_cout()[i][j]
        if j % 100 == 0:
          bot.send_message(message.chat.id, text=f"{cout}".format(message.from_user))
          cout = ""
          cout += all_users_cout()[i][j]
      bot.send_message(message.chat.id, text=f"{cout}".format(message.from_user))
    else:
      bot.send_message(message.chat.id, text=f"–ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –±–¥ - –Ω–∞–∂–º–∏—Ç–µ"
                       .format(message.from_user), reply_markup = markup)

    start(message)
  elif message.text == "üóûÔ∏è":
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    butn1 = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
    markup.add(butn1)
    bot.send_message(message.chat.id, text="–ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
                     .format(message.from_user), reply_markup=markup)
    bot.register_next_step_handler(message, news_for_all_users)

def news_for_all_users(message):
  if message.text == "–û—Ç–º–µ–Ω–∞":
    bot.send_message(message.chat.id, text="–ù–µ—Ç —Ç–∞–∫ –Ω–µ—Ç".format(message.from_user))
    start(message)
  else:
    list = all_id()
    for i in list:
      bot.send_message(i, text=f"–ù–æ–≤–æ—Å—Ç—å:\n{message.text}".format(message.from_user))
    start(message)


def groups(message):
  # –ó–¥–µ—Å—å –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã. 
  if message.text == "1 –∫—É—Ä—Å":
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for index in range(0, len(groups_for_keyboard(0)), 3):
      row_buttons = groups_for_keyboard(0)[index:index + 3] 
      markup.add(*row_buttons)
  elif message.text == "2 –∫—É—Ä—Å":
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for index in range(0, len(groups_for_keyboard(1)), 3):
      row_buttons = groups_for_keyboard(1)[index:index + 3] 
      markup.add(*row_buttons)
  elif message.text == "3 –∫—É—Ä—Å":
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for index in range(0, len(groups_for_keyboard(2)), 3):
      row_buttons = groups_for_keyboard(2)[index:index + 3] 
      markup.add(*row_buttons)
  elif message.text == "4 –∫—É—Ä—Å":
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for index in range(0, len(groups_for_keyboard(3)), 3):
      row_buttons = groups_for_keyboard(3)[index:index + 3] 
      markup.add(*row_buttons)
  elif message.text == "/prepod":
    prepod_tim_table(message)
    

  bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É".format(message.from_user),reply_markup=markup)
  bot.register_next_step_handler(message, getIdGroup);

def getIdGroup(message):
  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
  global GroupId
  GroupId = Group_ID(message.text)
  groupChoise(message.text, str(message.chat.id), str(message.chat.username),
              datetime.datetime.now().strftime('(%Y-%m-%d)%H:%M:%S'))
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
  btn1 = types.KeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
  btn2 = types.KeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫")
  btn3 = types.KeyboardButton("–°—Ä–µ–¥–∞")
  btn4 = types.KeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥")
  btn5 = types.KeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞")
  btn6 = types.KeyboardButton("–°—É–±–±–æ—Ç–∞")
  btn7 = types.KeyboardButton("–í—Å—è –Ω–µ–¥–µ–ª—è")
  btn8 = types.KeyboardButton("–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
  markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8)
  bot.send_message(message.chat.id, text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Ç–µ–±–µ –≤—ã–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?"
                   .format(message.from_user), reply_markup=markup)
  bot.register_next_step_handler(message, func)

def func(message):
  # –ê —ç—Ç–æ –≤—ã–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    time.sleep(0.5)
    week_days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í—Å—è –Ω–µ–¥–µ–ª—è"]
    try:
      if message.text in week_days:
        now = datetime.datetime.now().strftime('(%Y-%m-%d)%H:%M:%S')
        if time_check(now, str(message.chat.id)) == True:
          bot.send_message(message.chat.id, text=Is_t_group(base_group_name(str(message.chat.id)),
                                                            str(message.text)), parse_mode="Markdown")
          bot.register_next_step_handler(message, func)
        else:
          bot.send_message(message.chat.id, text="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —ç—Ç—É —Å–µ–∫—É–Ω–¥—É. –î–∞–≤–∞–π —á—É—Ç—å –ø–æ–º–µ–¥–ª–µ–Ω–Ω–µ–µ")
          start(message)
          bot.register_next_step_handler(message, func)
      elif (message.text == "–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"):
        start(message)
    except:
      bot.send_message(message.chat.id, text="–õ–∏–±–æ —Ç–≤–æ–π –∫–æ—Å—è–∫, –ª–∏–±–æ –º–æ–π. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –Ω–∞—á–∞–ª–∞, –Ω–∞–∂–º–∏ –Ω–∞ /start")
 
  
@bot.callback_query_handler(func=lambda call: call.data == "BD_cout")
def BD_cout_func(call: types.CallbackQuery):
  #–û—Ç–≤–µ—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 
    bot.send_document(call.message.chat.id, open(f'{base_open_admin()}', 'rb'))
   
bot.infinity_polling()
